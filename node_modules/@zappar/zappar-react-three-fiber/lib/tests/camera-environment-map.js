"use strict";
/* eslint-disable no-undef */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = __importStar(require("@zappar/jest-console-logs"));
// import "expect-puppeteer";
const jest_image_snapshot_1 = require("jest-image-snapshot");
expect.extend({ toMatchImageSnapshot: jest_image_snapshot_1.toMatchImageSnapshot });
jest.setTimeout(60000);
const url = "https://0.0.0.0:8081/pages/jest/module/camera-environment-map.html";
describe("face tracking", () => {
    it("console logs", async () => {
        const page = await browser.newPage();
        page.goto(url);
        await util.expectLogs({
            expected: [
                /^Zappar for React Three v/,
                /Zappar for ThreeJS v\d*.\d*.\d*/,
                /Zappar JS v\d*.\d*.\d*/,
                /Zappar CV v\d*.\d*.\d*/,
                "[Zappar] INFO html_element_source_t initialized",
                "[Zappar] INFO camera_source_t initialized",
                "[Zappar] INFO pipeline_t initialized",
                "[Zappar] INFO identity for license check: 0.0.0.0",
            ],
            page,
            timeoutMs: 30000,
        });
        // Wait 1s for texture to load
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const screenshot = await page.screenshot();
        expect(screenshot).toMatchImageSnapshot({
            customDiffConfig: {
                threshold: 0.025,
            },
            failureThreshold: 0.025,
            failureThresholdType: "percent",
        });
        // Avoid premature exit
        await new Promise((resolve) => setTimeout(resolve, 1000));
        await page.close();
    });
});
