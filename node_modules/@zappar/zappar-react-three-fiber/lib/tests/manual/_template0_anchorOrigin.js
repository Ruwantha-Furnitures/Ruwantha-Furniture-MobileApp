"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-undef */
/* eslint-disable import/no-dynamic-require */
/* eslint-disable global-require */
const react_1 = __importStar(require("react"));
const react_dom_1 = require("react-dom");
const fiber_1 = require("@react-three/fiber");
const three_1 = require("three");
const index_1 = require("../../src/index");
function Plane(props) {
    const { type, poseMode } = props;
    const planeTextureSrc = require(`file-loader!../assets/planes/${type}.jpg`).default;
    const planeTexture = fiber_1.useLoader(three_1.TextureLoader, planeTextureSrc);
    const [position, setPosition] = react_1.useState([0, 0, 0]);
    react_1.useEffect(() => {
        switch (type) {
            case "camera":
                setPosition([0, 0, -5]);
                break;
            case "scene":
                if (poseMode === "anchor-origin") {
                    setPosition([0, -0.5, 0]);
                }
                else {
                    setPosition([0, -0.5, -5]);
                }
                break;
            case "target":
                setPosition([0, 0, 0]);
                break;
            default:
                break;
        }
    }, [type, poseMode]);
    return (react_1.default.createElement("mesh", { scale: [1, 1, 1], position: position },
        react_1.default.createElement("planeBufferGeometry", { attach: "geometry", args: [1, 0.25] }),
        react_1.default.createElement("meshBasicMaterial", { attach: "material", map: planeTexture })));
}
function App() {
    const [imageAnchor, setFaceAnchor] = react_1.useState();
    const [cameraOption, setCameraOption] = react_1.useState("default");
    const [cameraPose, setCameraPose] = react_1.useState("default");
    const [mirror, setMirror] = react_1.useState("none");
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(index_1.BrowserCompatibility, { fallback: react_1.default.createElement("div", null, "Sorry!") }),
        react_1.default.createElement(index_1.ZapparCanvas, null,
            react_1.default.createElement("axesHelper", null),
            react_1.default.createElement(index_1.ZapparCamera, { userCameraMirrorMode: mirror, rearCameraMirrorMode: mirror, poseAnchorOrigin: imageAnchor, poseMode: cameraPose, userFacing: cameraOption === "userFacing" },
                react_1.default.createElement(react_1.Suspense, { fallback: null },
                    react_1.default.createElement(Plane, { type: "camera" }))),
            react_1.default.createElement(index_1.FaceTracker, { onNewAnchor: setFaceAnchor },
                react_1.default.createElement(react_1.Suspense, { fallback: null },
                    react_1.default.createElement(Plane, { type: "target" }))),
            react_1.default.createElement(react_1.Suspense, { fallback: null },
                react_1.default.createElement(Plane, { type: "scene", poseMode: cameraPose })),
            react_1.default.createElement("directionalLight", { position: [2.5, 8, 5], intensity: 1.5 })),
        react_1.default.createElement("div", { className: "options" },
            react_1.default.createElement("select", { id: "cameraSelect", value: cameraOption, onChange: (e) => setCameraOption(e.target.value), onBlur: (e) => setCameraOption(e.target.value) },
                react_1.default.createElement("option", { value: "default" }, "Default Camera"),
                react_1.default.createElement("option", { value: "userFacing" }, "Use Facing Camera")),
            react_1.default.createElement("select", { id: "poseSelect", value: cameraPose, onChange: (e) => setCameraPose(e.target.value), onBlur: (e) => setCameraPose(e.target.value) },
                react_1.default.createElement("option", { value: "default" }, "Camera Pose Default"),
                react_1.default.createElement("option", { value: "attitude" }, "Camera Pose With Device Attitude"),
                react_1.default.createElement("option", { value: "anchor-origin" }, "Camera Pose With Anchor Origin")),
            react_1.default.createElement("select", { id: "mirrorSelect", onChange: (e) => setMirror(e.target.value), onBlur: (e) => setMirror(e.target.value) },
                react_1.default.createElement("option", { value: "none" }, "No Mirror"),
                react_1.default.createElement("option", { value: "poses" }, "Mirror Poses"),
                react_1.default.createElement("option", { value: "css" }, "CSS ScaleX")))));
}
exports.default = App;
react_dom_1.render(react_1.default.createElement(App, null), document.getElementById("root"));
